{"attachments":{"effective%20radiactive%20forcing.png":{"type":"sha1","value":"fd69f5eae636fc6910b6cb8dedade5944905068d"}},"cell_type":"markdown","id":"5cb7b8","input":"![effective%20radiactive%20forcing.png](attachment:effective%20radiactive%20forcing.png)","pos":33,"type":"cell"}
{"attachments":{"effective%20radiactive%20forcing.png":{"type":"sha1","value":"fd69f5eae636fc6910b6cb8dedade5944905068d"}},"cell_type":"markdown","id":"ababc6","input":"## Effective radiative forcing\n\nFinally, a (nt, 13) array F of effective radiative forcing is returned (all units W m-2):","pos":32,"type":"cell"}
{"attachments":{"emission%20table.png":{"type":"sha1","value":"96801b863f0c5849f65f41ca296ca52c35458397"}},"cell_type":"markdown","id":"118121","input":"![emission%20table.png](attachment:emission%20table.png)","pos":28,"type":"cell"}
{"attachments":{"ghg%20concentration%20table.png":{"type":"sha1","value":"b901a536e3d31ae7f4b36120a733d16931db7fdc"}},"cell_type":"markdown","id":"32e36e","input":"![ghg%20concentration%20table.png](attachment:ghg%20concentration%20table.png)","pos":31,"type":"cell"}
{"attachments":{"ghg%20concentration%20table.png":{"type":"sha1","value":"b901a536e3d31ae7f4b36120a733d16931db7fdc"}},"cell_type":"markdown","id":"5ca82d","input":"## GHG Concentrations\n\nMulti-species FaIR tracks the atmospheric concentrations of 31 GHG species; C is returned as a (nt, 31) array. The colums are indexed as follows:","pos":30,"type":"cell"}
{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-ec04c8aa-a386-47b0-8c47-bdb3932b68f3.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1611592498130,"exec_count":1,"id":"acedcd","input":"%matplotlib inline\n","kernel":"python3","pos":0,"start":1611592498125,"state":"done","type":"cell"}
{"cell_type":"code","end":1611592498860,"exec_count":2,"id":"d64c39","input":"import fair\nfair.__version__","kernel":"python3","output":{"0":{"data":{"text/plain":"'1.6.1'"},"exec_count":2}},"pos":1,"start":1611592498160,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1741af","input":"","pos":67,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"76a1c4","input":"fig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\nC, F, T_irm = fair.forward.fair_scm(\n    emissions = rcp45.Emissions.emissions,\n    tcrecs=np.array([1.803,2.816]),\n    F2x=4.45,\n    scale_F2x=False,\n    d=np.array([337.4, 3.53]),\n)\n\nC, F, T_tlm, lambda_eff, ohc, heatflux = fair.forward.fair_scm(\n    emissions = rcp45.Emissions.emissions,\n    temperature_function='Geoffroy',\n    lambda_global=1.58,\n    ocean_heat_capacity=np.array([8.7,158]),\n    deep_ocean_efficacy=1.19,\n    ocean_heat_exchange=0.73,\n    F2x=4.45,\n    scale_F2x=False\n)\n\nax1.plot(rcp45.Emissions.year, T_tlm, label='Geoffroy definition');\nax1.plot(rcp45.Emissions.year, T_irm, label='Impulse response definition')\nax1.legend()\nax1.set_title('Global mean surface temperature')\nax1.set_ylabel('K')\nax2.plot(rcp45.Emissions.year, ohc)\nax2.set_title('Ocean heat uptake')\nax2.set_ylabel('J')\nax3.plot(rcp45.Emissions.year, heatflux)\nax3.set_title('TOA energy imbalance')\nax3.set_ylabel('W m$^{-2}$')\nax4.plot(rcp45.Emissions.year, lambda_eff)\nax4.set_title('Effective climate feedback')\nax4.set_ylabel('W m^${-2}$ K$^{-1}$')","pos":66,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8e1b25","input":"C1,F1,T1 = fair_scm(emissions=rcp85.Emissions.emissions)\nC2,F2,T2 = fair_scm(emissions=rcp85.Emissions.emissions, gir_carbon_cycle=True)\nC3,F3,T3 = fair_scm(emissions=rcp26.Emissions.emissions)\nC4,F4,T4 = fair_scm(emissions=rcp26.Emissions.emissions, gir_carbon_cycle=True)\nfig =plt.figure()\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\nax1.plot(np.arange(1765,2501), C1[:,0], label='RCP8.5 FaIR v1');\nax1.plot(np.arange(1765,2501), C2[:,0], label='RCP8.5 GIR');\nax1.plot(np.arange(1765,2501), C3[:,0], label='RCP2.6 FaIR v1');\nax1.plot(np.arange(1765,2501), C4[:,0], label='RCP2.6 GIR');\nax1.legend()\nax1.set_title('CO2 concentrations')\nax1.set_ylabel('ppm')\nax2.plot(np.arange(1765,2501), T1);\nax2.plot(np.arange(1765,2501), T2);\nax2.plot(np.arange(1765,2501), T3);\nax2.plot(np.arange(1765,2501), T4);\nax2.set_title('Temperature')\nax2.set_ylabel('K');","pos":64,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"efc683","input":"# Going from all-forcing to CO2 only. Note natural forcing turned off.\nC1, F1, T1, restart = fair_scm(\n    emissions   = rcp45.Emissions.emissions[:255,:],\n    natural     = fair.ancil.natural.Emissions.emissions[:255,:],\n    restart_out = True,\n    F_solar     = 0.,\n    F_volcanic  = 0.\n)\n\n# constant non-CO2 forcing from 2019 to 2500\nnonco2_rf = np.sum(F1[-1,1:]) * np.ones(481)\n\n# run forward to 2100 with zero CO2 emissions and constant non-CO2 forcing\nC2, F2, T2 = fair_scm(\n    emissions   = 0.,\n    other_rf    = nonco2_rf,\n    useMultigas = False,\n    restart_in  = restart\n)\n\n# do a normal RCP4.5 run for comparison\nC45, F45, T45 = fair_scm(\n    emissions  = rcp45.Emissions.emissions,\n    F_solar    = 0.,\n    F_volcanic = 0.\n)\n\nfig = plt.figure()\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nax1.plot(rcp45.Emissions.year, np.concatenate((C1[:,0], C2)), color='blue',\n         label='zero CO2 emissions, constant non-CO2 forcing')\nax2.plot(rcp45.Emissions.year, np.concatenate((np.sum(F1,axis=1), F2)), color='blue',\n         label='Emissions driven')\nax3.plot(rcp45.Emissions.year, np.concatenate((T1, T2)), color='blue',\n         label='Emissions driven')\n\nax1.plot(rcp45.Emissions.year, C45[:,0], color='red', label='RCP4.5')\nax2.plot(rcp45.Emissions.year, np.sum(F45,axis=1), color='red', label='RCP4.5')\nax3.plot(rcp45.Emissions.year, T45, color='red', label='RCP4.5')\n\nax1.set_ylabel('CO2 concentrations, ppm')\nax2.set_ylabel('Radiative forcing, W/m2')\nax3.set_ylabel('Temperature anomaly, K')\n\nax1.set_xlabel('year')\nax2.set_xlabel('year')\nax3.set_xlabel('year')\nax1.legend();","pos":62,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"dc08b0","input":"# set iirf time horizon to 60 years. Should get a warning, but it will still let us proceed\nC[:,1],F[:,1],T[:,1] = fair.forward.fair_scm(\n    emissions=emissions,\n    useMultigas=False,\n    iirf_h=60)","output":{"0":{"name":"stderr","output_type":"stream","text":"/home/user/.local/lib/python3.8/site-packages/fair/forward.py:120: RuntimeWarning: iirf_h=60.000000, which is less than iirf_max (97.000000)\n  warnings.warn('iirf_h=%f, which is less than iirf_max (%f)'\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"3648cd","input":"# set maximum iirf\nC[:,2],F[:,2],T[:,2] = fair.forward.fair_scm(\n    emissions=emissions,\n    useMultigas=False,\n    iirf_h=60,\n    iirf_max=58)\n\n# plot results\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), emissions, color='black')\nax1.set_ylabel('Emissions (GtC)')\nax2 = fig.add_subplot(222)\nhandles = ax2.plot(range(0, emissions.size), C)\nlabels = ['iirf_h=100, iirf_max=97','iirf_h=60, iirf_max=97','iirf_h=60, iirf_max=58']\nax2.legend(handles, labels)\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3 = fig.add_subplot(223)\nax3.plot(range(0, emissions.size), F)\nax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\nax4 = fig.add_subplot(224)\nax4.plot(range(0, emissions.size), T)\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"f0f2f520275fce7754391f02e4f29a7ab1f9391a","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":519,"width":943}},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"f2e41e","input":"# set up emissions and forcing arrays\nemissions = np.zeros(250)\nemissions[:125] = 10.0\n\n# create output arrays\nnrun=9\nC = np.empty((emissions.size, nrun))\nF = np.empty((emissions.size, nrun))\nT = np.empty((emissions.size, nrun))\n\n# initialise plot\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), emissions, color='black')\nax1.set_ylabel('Emissions (GtC)')\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\necs = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 3.0, 3.0, 3.0, 3.0])\ntcr = np.array([1.75, 1.75, 1.75, 1.75, 1.75, 0.75, 1.25, 2.25, 2.75])\ncolors = ['#800000','#808000','#008000','#008080','#000080', '#000000', '#004000', '#00c000', '#00ff00']\n\n# run the model and plot outputs\nfor i in range(nrun):\n    C[:,i],F[:,i],T[:,i] = fair.forward.fair_scm(\n        emissions=emissions,\n        useMultigas=False,\n        tcrecs=np.array([tcr[i], ecs[i]]),\n    )\n\n    ax2.plot(range(0, emissions.size), C[:,i], color=colors[i], label='ECS=%3.1fK, TCR=%4.2fK' % (ecs[i], tcr[i]))\n    ax2.set_ylabel('CO$_2$ concentrations (ppm)')\n    ax3.plot(range(0, emissions.size), F[:,i], color=colors[i])\n    ax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\n    ax4.plot(range(0, emissions.size), T[:,i], color=colors[i])\n    ax4.set_ylabel('Temperature anomaly (K)');\nax2.legend();","output":{"0":{"data":{"image/png":"f7c19e63fa1ac5a825a0b325f73fa136149f525d","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":12,"metadata":{"image/png":{"height":516,"width":941}},"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"bac854","input":"from scipy.stats import lognorm, truncnorm\n\n# generate an ECS time series that roughly follows the AR5 likely range\necs = lognorm.rvs(0.4, size=250, scale=3, random_state=299)\n\n# define TCR in terms of a realised warming fraction\nrwf = truncnorm.rvs(-3, 3, loc=0.6, scale=0.1, size=250, random_state=301)\ntcr = rwf*ecs\n\nemissions = np.zeros(250)\nemissions[:125] = 10.0\n\nC,F,T = fair.forward.fair_scm(\n    emissions=emissions,\n    useMultigas=False,\n    tcrecs=np.vstack([tcr, ecs]).T,\n)\n\n# plot the output\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), ecs, color='black', label='ECS')\nax1.plot(range(0, emissions.size), tcr, color='black', ls=':', label='TCR')\nax1.legend()\nax1.set_ylabel('ECS/TCR (K)')\nax2 = fig.add_subplot(222)\nax2.plot(range(0, emissions.size), C, color='blue')\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3 = fig.add_subplot(223)\nax3.plot(range(0, emissions.size), F, color='orange')\nax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\nax4 = fig.add_subplot(224)\nax4.plot(range(0, emissions.size), T, color='red')\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"cc4fbae24077171914d9830cd84ad49c5c4933f8","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":13,"metadata":{"image/png":{"height":516,"width":941}},"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"359838","input":"# set up emissions and forcing arrays\nemissions = np.ones(250) * 10.0\nemissions[125:] = 0.0\n\nq = np.ones((250,2))\nq[:,0] = 0.2\nq[:,1] = 0.6\nC,F,T = fair.forward.fair_scm(\n    emissions=emissions,\n    useMultigas=False,\n    tcrecs=None,\n    q=q,\n)\nprint (C[-1], F[-1], T[-1])","output":{"0":{"name":"stdout","output_type":"stream","text":"500.55243490460407 3.1476987553820654 2.2790510548813443\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"7fd89f","input":"# set up emissions and forcing arrays\nemissions = np.ones(250) * 10.0   # Unit: GtC\nemissions[125:] = 0.0\nother_rf = np.zeros(emissions.size)\nfor x in range(0, emissions.size):\n    other_rf[x] = 0.5 * np.sin(2 * np.pi * (x) / 14.0)\n\n# create output arrays\nnrun=4\nC = np.empty((emissions.size, nrun))\nF = np.empty((emissions.size, nrun))\nT = np.empty((emissions.size, nrun))\n\n# run the model for default values\nC[:,0],F[:,0],T[:,0] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False)\n\n# ... and for our alternatives\nC[:,1],F[:,1],T[:,1] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False,\n    d=np.array([1000.0, 18.0]))\nC[:,2],F[:,2],T[:,2] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False,\n    d=np.array([239.0, 1.0]))\nC[:,3],F[:,3],T[:,3] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False,\n    d=np.array([60., 4.1]))\n\n# plot the output\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), emissions, color='black')\nax1.set_ylabel('Emissions (GtC)')\nax2 = fig.add_subplot(222)\nhandles = ax2.plot(range(0, emissions.size), C)\nlabels = ['default','slow repsonse','quick mixed layer response','quick deep ocean response']\nax2.legend(handles, labels)\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3 = fig.add_subplot(223)\nax3.plot(range(0, emissions.size), F)\nax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\nax4 = fig.add_subplot(224)\nax4.plot(range(0, emissions.size), T)\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"826ca85813a1489a531ba2d999362ab5cc2e694e","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":516,"width":941}},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"5b9a8c","input":"(C,F,T) = fair_scm(emissions=emissions, **kwargs)","output":{"0":{"ename":"NameError","evalue":"name 'kwargs' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-c089232bbf12>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfair_scm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0memissions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0memissions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'kwargs' is not defined"]}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"c67fff","input":"from scipy.stats import gamma\nemissions = np.zeros((250,40))\n\n# remember column zero is the years\nemissions[:,0] = np.arange(1850,2100)\n\n# add some CO2 fossil and land use, GtC/yr\nemissions[:,1] = 10.\nemissions[:,2] = 1.\n\n# some methane and nitrous oxide in this example, Mt/yr\nemissions[:,3] = 300.\nemissions[:,4] = 19.\n\n# aerosol and ozone precursors, Mt/yr\nemissions[:,5] = 0.1*np.arange(250)   # SOx\nemissions[:,6] = 500.*np.log(1+np.arange(250))  # CO\nemissions[:,7] = 100.+100.*np.cos(np.arange(250))  # NMVOC\nemissions[:,8] = 40.*norm.rvs(loc=1, scale=0.1, size=250, random_state=9)   # NOx\nemissions[:,9] = 6.    # BC\nemissions[:,10] = 30.  # OC\nemissions[:,11] = 35.  # NH3\n\n# throw in some CFCs\nemissions[:,24] = 1000. # CFC11\n# and leave all other emissions as zero.\n\n# Volcanic and solar forcing are provided externally. Let's invent some\nsolar = 0.1 * np.sin(2 * np.pi * np.arange(250) / 11.5)\nvolcanic = -gamma.rvs(0.2, size=250, random_state=100)\n\n# efficacies are the temperature change for each forcing agent compared to CO2\n# in our runs we usually set the efficacy of BC on snow to 3, following Bond et\n# al (2013)\neff = np.ones(13)\neff[9] = 3.0\n\n# b_aero: ERFari for each SLCF species (indices 5 to 11)\n# b_tro3: tropospheric ozone coeffs for CH4, CO, NMVOC, NOx\nC,F,T = fair_scm(emissions=emissions,\n                 natural=np.zeros((250,2)), # natural emissions of CH4 and N2O\n                 aviNOx_frac=0.05, # proportion of NOx emissions from aviation\n                 fossilCH4_frac=0.25, # proportion of anthro CH4 emis from fossil fuels\n                 oxCH4_frac=0.61, # proportion of fossil CH4 eventually oxidised to CO2\n                 stwv_from_ch4=0.1, # proportion of CH4 ERF contributing to strat H2O\n                 ghg_forcing='Etminan',  # etminan or myhre\n                 useStevenson=False, # Stevenson or regression based trop. O3 forcing?\n                 b_aero = np.array([-35,0,-5,-6,450,-40,-10])*1e-4,\n                 b_tro3 = np.array([3., 1., 8., 99.])*1e-4,\n                 aerosol_forcing = 'aerocom+ghan',  # aerocom, aerocom+ghan or stevens\n                 F_solar = solar,\n                 F_volcanic = volcanic,\n                 efficacy = eff\n                )\n\n# Plot the forcing from each component\nfig = plt.figure()\nlabel = ['CO2','CH4','N2O','Other GHG','Trop O3','Strat O3','Strat H2O','Contrails','Aerosols',\n         'BC on snow', 'Land use', 'Volcanic', 'Solar']\nfor i in range(13):\n    ax = fig.add_subplot(5,3,i+1)\n    ax.plot(np.arange(1850,2100), F[:,i])\n    ax.text(0.95,0.95,label[i],transform=ax.transAxes,va='top', ha='right')\n# plot temperature change\nax = fig.add_subplot(5,3,15)\nax.plot(np.arange(1850,2100),T)\nax.text(0.95, 0, 'Temperature change', transform=ax.transAxes, va='bottom', ha='right')","output":{"0":{"ename":"TypeError","evalue":"fair_scm() got an unexpected keyword argument 'useStevenson'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-f3f1adf69506>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;31m# b_aero: ERFari for each SLCF species (indices 5 to 11)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;31m# b_tro3: tropospheric ozone coeffs for CH4, CO, NMVOC, NOx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m C,F,T = fair_scm(emissions=emissions,\n\u001b[0m\u001b[1;32m     41\u001b[0m                  \u001b[0mnatural\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m250\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m# natural emissions of CH4 and N2O\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m                  \u001b[0maviNOx_frac\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.05\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m# proportion of NOx emissions from aviation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: fair_scm() got an unexpected keyword argument 'useStevenson'"]}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"9c6000","input":"# Get RCP modules\nfrom fair.RCPs import rcp26, rcp45, rcp60, rcp85\n\n# Basic RCP runs\nC26, F26, T26 = fair.forward.fair_scm(emissions=rcp26.Emissions.emissions)\nC45, F45, T45 = fair.forward.fair_scm(emissions=rcp45.Emissions.emissions)\nC60, F60, T60 = fair.forward.fair_scm(emissions=rcp60.Emissions.emissions)\nC85, F85, T85 = fair.forward.fair_scm(emissions=rcp85.Emissions.emissions)\n\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\nax1.plot(rcp26.Emissions.year, rcp26.Emissions.co2_fossil, color='green', label='RCP2.6')\n# just show CO2 conc.\nax2.plot(rcp26.Emissions.year, C26[:, 0], color='green')\n# sum over axis 1 to get total ERF\nax3.plot(rcp26.Emissions.year, np.sum(F26, axis=1), color='green')\nax4.plot(rcp26.Emissions.year, T26, color='green')\n\nax1.plot(rcp45.Emissions.year, rcp45.Emissions.co2_fossil, color='blue', label='RCP4.5')\nax2.plot(rcp45.Emissions.year, C45[:, 0], color='blue')\nax3.plot(rcp45.Emissions.year, np.sum(F45, axis=1), color='blue')\nax4.plot(rcp45.Emissions.year, T45, color='blue')\n\nax1.plot(rcp60.Emissions.year, rcp60.Emissions.co2_fossil, color='red', label='RCP6')\nax2.plot(rcp60.Emissions.year, C60[:, 0], color='red')\nax3.plot(rcp60.Emissions.year, np.sum(F60, axis=1), color='red')\nax4.plot(rcp60.Emissions.year, T60, color='red')\n\nax1.plot(rcp85.Emissions.year, rcp85.Emissions.co2_fossil, color='black', label='RCP8.5')\nax2.plot(rcp85.Emissions.year, C85[:, 0], color='black')\nax3.plot(rcp85.Emissions.year, np.sum(F85, axis=1), color='black')\nax4.plot(rcp85.Emissions.year, T85, color='black')\n\nax1.set_ylabel('Fossil CO$_2$ Emissions (GtC)')\nax1.legend()\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3.set_ylabel('Total radiative forcing (W m$^{-2}$)')\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"75be3dc63e9c584007f3ff3eb9537a892935d341","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":518,"width":939}},"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"08354a","input":"fig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\nax1.plot(rcp26.Emissions.year, C26[:,1], color='green', label='RCP3PD')\nax1.plot(rcp45.Emissions.year, C45[:,1], color='blue', label='RCP4.5')\nax1.plot(rcp60.Emissions.year, C60[:,1], color='red', label='RCP6')\nax1.plot(rcp85.Emissions.year, C85[:,1], color='black', label='RCP8.5')\nax1.set_title(\"Methane concentrations, ppb\")\n\nax2.plot(rcp26.Emissions.year, C26[:,2], color='green', label='RCP3PD')\nax2.plot(rcp45.Emissions.year, C45[:,2], color='blue', label='RCP4.5')\nax2.plot(rcp60.Emissions.year, C60[:,2], color='red', label='RCP6')\nax2.plot(rcp85.Emissions.year, C85[:,2], color='black', label='RCP8.5')\nax2.set_title(\"Nitrous oxide concentrations, ppb\")\n\n# Weight H and F gases by radiative efficiency\nfrom fair.constants import radeff\n\n# indices 3:15 are HFCs and PFCs\nC26_hfc134a_eq = np.sum(C26[:,3:15]*radeff.aslist[3:15],axis=1)/radeff.HFC134A\nC45_hfc134a_eq = np.sum(C45[:,3:15]*radeff.aslist[3:15],axis=1)/radeff.HFC134A\nC60_hfc134a_eq = np.sum(C60[:,3:15]*radeff.aslist[3:15],axis=1)/radeff.HFC134A\nC85_hfc134a_eq = np.sum(C85[:,3:15]*radeff.aslist[3:15],axis=1)/radeff.HFC134A\n\n# indices 15:31 are ozone depleters\nC26_cfc12_eq = np.sum(C26[:,15:31]*radeff.aslist[15:31],axis=1)/radeff.CFC12\nC45_cfc12_eq = np.sum(C45[:,15:31]*radeff.aslist[15:31],axis=1)/radeff.CFC12\nC60_cfc12_eq = np.sum(C60[:,15:31]*radeff.aslist[15:31],axis=1)/radeff.CFC12\nC85_cfc12_eq = np.sum(C85[:,15:31]*radeff.aslist[15:31],axis=1)/radeff.CFC12\n\nax3.plot(rcp26.Emissions.year, C26_hfc134a_eq, color='green', label='RCP2.6')\nax3.plot(rcp45.Emissions.year, C45_hfc134a_eq, color='blue', label='RCP4.5')\nax3.plot(rcp60.Emissions.year, C60_hfc134a_eq, color='red', label='RCP6')\nax3.plot(rcp85.Emissions.year, C85_hfc134a_eq, color='black', label='RCP8.5')\nax3.set_title(\"HFC134a equivalent concentrations, ppt\")\n\nax4.plot(rcp26.Emissions.year, C26_cfc12_eq, color='green', label='RCP2.6')\nax4.plot(rcp45.Emissions.year, C45_cfc12_eq, color='blue', label='RCP4.5')\nax4.plot(rcp60.Emissions.year, C60_cfc12_eq, color='red', label='RCP6')\nax4.plot(rcp85.Emissions.year, C85_cfc12_eq, color='black', label='RCP8.5')\nax4.set_title(\"CFC12 equivalent concentrations, ppt\")\nax1.legend();","output":{"0":{"data":{"image/png":"a4d3ab662dd2751f8a6ef601f4d989e1a53a0a41","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":19,"metadata":{"image/png":{"height":531,"width":932}},"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"67ddde","input":"fig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\nax1.plot(rcp26.Emissions.year, F26[:,4], color='green', label='RCP2.6')\nax1.plot(rcp45.Emissions.year, F45[:,4], color='blue', label='RCP4.5')\nax1.plot(rcp60.Emissions.year, F60[:,4], color='red', label='RCP6')\nax1.plot(rcp85.Emissions.year, F85[:,4], color='black', label='RCP8.5')\nax1.set_title(\"Tropospheric ozone forcing, W m$^{-2}$\")\n\nax2.plot(rcp26.Emissions.year, F26[:,5], color='green', label='RCP2.6')\nax2.plot(rcp45.Emissions.year, F45[:,5], color='blue', label='RCP4.5')\nax2.plot(rcp60.Emissions.year, F60[:,5], color='red', label='RCP6')\nax2.plot(rcp85.Emissions.year, F85[:,5], color='black', label='RCP8.5')\nax2.set_title(\"Stratospheric ozone forcing, W m$^{-2}$\")\n\nax3.plot(rcp26.Emissions.year, F26[:,8], color='green', label='RCP2.6')\nax3.plot(rcp45.Emissions.year, F45[:,8], color='blue', label='RCP4.5')\nax3.plot(rcp60.Emissions.year, F60[:,8], color='red', label='RCP6')\nax3.plot(rcp85.Emissions.year, F85[:,8], color='black', label='RCP8.5')\nax3.set_title(\"Aerosol forcing, W m$^{-2}$\")\n\nax4.plot(rcp26.Emissions.year, F26[:,10], color='green', label='RCP2.6')\nax4.plot(rcp45.Emissions.year, F45[:,10], color='blue', label='RCP4.5')\nax4.plot(rcp60.Emissions.year, F60[:,10], color='red', label='RCP6')\nax4.plot(rcp85.Emissions.year, F85[:,10], color='black', label='RCP8.5')\nax4.set_title(\"Land use forcing, W m$^{-2}$\")\nax1.legend();","output":{"0":{"data":{"image/png":"c492750599291905ae2e6bcaa49b659d481a512e","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":535,"width":930}},"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"69ea40","input":"# Produce a base emissions-driven RCP4.5 run\nC1,F1,T1 = fair.forward.fair_scm(\n    emissions_driven=True,\n    emissions=fair.RCPs.rcp45.Emissions.co2,\n    useMultigas=False)\n\n# Produce a concentration driven RCP4.5 run\nC2,F2,T2 = fair.forward.fair_scm(\n    emissions_driven=False,\n    C=fair.RCPs.rcp45.Concentrations.co2,\n    useMultigas=False)\n\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\n\nax1.plot(rcp45.Emissions.year, F1, color='blue', label='Emissions driven')\nax1.plot(rcp45.Emissions.year, F2, color='red', label='Concentrations driven')\nax1.set_title(\"RCP4.5 radiative forcing, W m$^{-2}$\")\n\nax2.plot(rcp45.Emissions.year, T1, color='blue', label='Emissions driven')\nax2.plot(rcp45.Emissions.year, T2, color='red', label='Concentrations driven')\nax2.set_title(\"RCP4.5 temperature anomaly, K\")\nax1.legend();","output":{"0":{"data":{"image/png":"d1c3c734310eca3989826d79b5120a33d6751a48","text/plain":"<Figure size 1152x648 with 2 Axes>"},"exec_count":21,"metadata":{"image/png":{"height":268,"width":924}},"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"c4e2d4","input":"from fair.inverse import inverse_fair_scm","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"299034","input":"nt = 140 # years\nC  = 278. * 1.01**np.arange(nt) # compound 1% increase in CO2 concentrations","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"1eeae8","input":"# run with default carbon cycle parameters\nE1, F1, T1 = inverse_fair_scm(C=C)\n\n# show the effect of turning off the temperature feedback\nE2, F2, T2 = inverse_fair_scm(C=C, rt=0)\n\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax1.plot(range(nt), E1, color='blue', label='Temperature feedback')\nax1.plot(range(nt), E2, color='red', label='No temperature feedback')\nax1.set_title(\"Diagnosed emissions from 1% CO2 run\")\nax1.set_xlabel('year')\nax1.set_ylabel('GtC/yr')\nax2.plot(np.cumsum(E1), T1, color='blue')\nax2.plot(np.cumsum(E2), T1, color='red')\nax2.set_title(\"Transient climate response to cumulative CO2 emissions (TCRE)\")\nax2.set_xlabel(\"Cumulative emissions, GtC\")\nax2.set_ylabel(\"Temperature anomaly, K\")\nax1.legend();","output":{"0":{"data":{"image/png":"abe19fe13454b338b556449fa21f976ba4160933","text/plain":"<Figure size 1152x648 with 2 Axes>"},"exec_count":24,"metadata":{"image/png":{"height":277,"width":935}},"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"6bd37f","input":"# Produce a base emissions-driven RCP4.5 run\nC1,F1,T1 = fair.forward.fair_scm(\n    emissions_driven=True,\n    emissions=fair.RCPs.rcp45.Emissions.emissions,\n    useMultigas=True)\n\n# Produce a concentration driven RCP4.5 run\n# use Meinshausen's external forcing here\nC2,F2,T2 = fair.forward.fair_scm(\n    emissions_driven=False,\n    C=fair.RCPs.rcp45.Concentrations.gases,\n    F_tropO3 = rcp45.Forcing.tropo3,\n    F_aerosol = rcp45.Forcing.aero+rcp45.Forcing.cloud,\n    F_bcsnow = rcp45.Forcing.bcsnow,\n    useMultigas=True)\n\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\n\nax1.plot(rcp45.Emissions.year, np.sum(F1,axis=1), color='blue', label='Emissions driven')\nax1.plot(rcp45.Emissions.year, np.sum(F2,axis=1), color='red', label='Concentrations driven')\nax1.set_title(\"RCP4.5 radiative forcing, W m$^{-2}$\")\n\nax2.plot(rcp45.Emissions.year, T1, color='blue', label='Emissions driven')\nax2.plot(rcp45.Emissions.year, T2, color='red', label='Concentrations driven')\nax2.set_title(\"RCP4.5 temperature anomaly, K\")\nax1.legend();","output":{"0":{"data":{"image/png":"50732f081adcc0cfcf47d69c39090a146f5b63c1","text/plain":"<Figure size 1152x648 with 2 Axes>"},"exec_count":25,"metadata":{"image/png":{"height":268,"width":922}},"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"755224","input":"# Change default lifetimes of CH4 and N2O\nfrom fair.constants import lifetime\nlt = lifetime.aslist\nlt[1] = 12.6\nlt[2] = 131.\n\n# what are the defaults?\nprint (lifetime.CH4, lifetime.N2O)\n\n# How long are the RCPs?\nnt = len(rcp45.Emissions.year)\n\n# Run FaIR under RCP4.5 with no natural emissions\nC1,F1,T1 = fair_scm(emissions=rcp45.Emissions.emissions,\n                    natural=np.zeros((nt,2))\n                    )\n\n# Run FaIR under RCP4.5 with modified lifetimes\nC2,F2,T2 = fair_scm(emissions=rcp45.Emissions.emissions,\n                    lifetimes=lt\n                    )\n\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\n\nax1.plot(rcp45.Emissions.year, C45[:,1], color='blue', label='RCP4.5 default')\nax1.plot(rcp45.Emissions.year, C1[:,1], color='blue', ls=':', label='RCP4.5 no natural')\nax1.plot(rcp45.Emissions.year, C2[:,1], color='blue', ls='--', label='RCP4.5 modified lifetime')\nax1.set_title(\"Methane concentrations, ppb\")\nax2.plot(rcp45.Emissions.year, C45[:,2], color='blue', label='RCP4.5')\nax2.plot(rcp45.Emissions.year, C1[:,2], color='blue', ls=':', label='RCP4.5 no natural')\nax2.plot(rcp45.Emissions.year, C2[:,2], color='blue', ls='--', label='RCP4.5 modified lifetime')\nax2.set_title(\"Nitrous oxide concentrations, ppb\")\nax1.legend();","output":{"0":{"name":"stdout","output_type":"stream","text":"9.3 121.0\n"},"1":{"data":{"image/png":"5be550ea99145251d54b1de4c17567267fd85e4b","text/plain":"<Figure size 1152x648 with 2 Axes>"},"exec_count":26,"metadata":{"image/png":{"height":264,"width":932}},"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"b3c99e","input":"from scipy import stats\nfrom fair.tools.ensemble import tcrecs_generate\n\n# generate 100 TCR and ECS pairs, using a lognormal distribution informed by CMIP5 models\ntcrecs = tcrecs_generate('cmip5', n=100, dist='lognorm', correlated=True, seed=38571)\n\n# generate some forcing scale factors with SD of 10% of the best estimate\nF_scale = stats.norm.rvs(size=(100,13), loc=1, scale=0.1, random_state=40000)\nF2x = 3.71 * F_scale[:,0]\nF_scale[:,0] = 1.0  # set CO2 forcing scaling with F2x above\n\n# generate ensemble for carbon cycle parameters\nr0 = stats.norm.rvs(size=100, loc=35, scale=3.5, random_state=41000)\nrc = stats.norm.rvs(size=100, loc=0.019, scale=0.0019, random_state=42000)\nrt = stats.norm.rvs(size=100, loc=4.165, scale=0.4165, random_state=45000)\n\nT = np.zeros((nt,100))\n\n# notice that we\nfor i in range(100):\n    _, _, T[:,i] = fair_scm(emissions=rcp85.Emissions.emissions,\n                            r0 = r0[i],\n                            rc = rc[i],\n                            rt = rt[i],\n                            tcrecs = tcrecs[i,:],\n                            scale = F_scale[i,:],\n                            F2x = F2x[i]\n                           )","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"0e575f","input":"import numpy as np\n\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-darkgrid')\nplt.rcParams['figure.figsize'] = (16, 9)","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"dc32a8","input":"from fair.forward import fair_scm","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"9ac585","input":"print(np.mean(T[1880-1765:2017-1765,i]))","output":{"0":{"name":"stdout","output_type":"stream","text":"0.7018996583331305\n"}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"9aa447","input":"from fair.tools.constrain import hist_temp\n\n# Cowtan & Way in-filled dataset of global temperatures\nCW = np.loadtxt('had4_krig_annual_v2_0_0.csv')\nconstrained = np.zeros(100, dtype=bool)\nfor i in range(100):\n    # we use observed trend from 1880 to 2016\n    constrained[i],_,_,_,_ = hist_temp(\n        CW[30:,1], T[1880-1765:2017-1765,i], CW[30:,0])\n\n# How many ensemble members passed the constraint?\nprint (np.sum(constrained))\n\n# What does this do to the ensemble?\nfig = plt.figure()\nax1 = fig.add_subplot(111)\nax1.plot(rcp85.Emissions.year[0:336], T[0:336,constrained]);\nax1.plot(CW[30:,0], CW[30:,1]+0.48, color='k');\n","output":{"0":{"name":"stdout","output_type":"stream","text":"31\n"},"1":{"data":{"image/png":"9f000e1e20cccaa7e32328f68384ed6fc73111ca","text/plain":"<Figure size 1152x648 with 1 Axes>"},"exec_count":47,"metadata":{"image/png":{"height":516,"width":922}},"output_type":"execute_result"}},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"cdbbf9","input":"fig = plt.figure()\nax1 = fig.add_subplot(111)\nax1.plot(rcp85.Emissions.year[0:336], T[0:336,:]);","output":{"0":{"data":{"image/png":"c12de44da0fc9a4c9f11a79f29f66aaabbb8917d","text/plain":"<Figure size 1152x648 with 1 Axes>"},"exec_count":48,"metadata":{"image/png":{"height":516,"width":922}},"output_type":"execute_result"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"e48e79","input":"# set up emissions and forcing arrays\nemissions = np.zeros(250)   # Unit: GtC\nemissions[125:] = 10.0\nother_rf = np.zeros(emissions.size)\nfor x in range(0, emissions.size):\n    other_rf[x] = 0.5 * np.sin(2 * np.pi * (x) / 14.0)\n\n# run the model\nC,F,T = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False\n)\n\n# plot the output\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), emissions, color='black')\nax1.set_ylabel('Emissions (GtC)')\nax2 = fig.add_subplot(222)\nax2.plot(range(0, emissions.size), C, color='blue')\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3 = fig.add_subplot(223)\nax3.plot(range(0, emissions.size), F, color='orange')\nax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\nax4 = fig.add_subplot(224)\nax4.plot(range(0, emissions.size), T, color='red')\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"8e5bbabaa02d4bf61de8bf926b25fa5c257dedfb","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":516,"width":935}},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"6f8971","input":"# Define a forcing time series\nfor x in range(0, emissions.size):\n    other_rf[x] = 0.02*x + 0.5 * np.sin(2 * np.pi * (x) / 14.0)\n\n# run the model with emissions off\n_,F,T = fair.forward.fair_scm(\n    emissions=False,\n    other_rf=other_rf,\n    useMultigas=False\n)\n\n# plot the output\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, other_rf.size), F, color='orange')\nax1.set_ylabel('Radiative forcing (W m$^{-2}$)')\nax1 = fig.add_subplot(222)\nax1.plot(range(0, other_rf.size), T, color='red')\nax1.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"e742b04d13573ac1bdf46f2bcde5dcf399a7f030","text/plain":"<Figure size 1152x648 with 2 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":249,"width":933}},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"9a9a72","input":"# set up emissions and forcing arrays\nemissions = np.ones(250) * 10.0   # Unit: GtC\nemissions[125:] = 0.0\nother_rf = np.zeros(emissions.size)\nfor x in range(0, emissions.size):\n    other_rf[x] = 0.5 * np.sin(2 * np.pi * (x) / 14.0)\n\n# create output arrays\nnrun = 10\nC = np.empty((emissions.size, nrun))\nF = np.empty((emissions.size, nrun))\nT = np.empty((emissions.size, nrun))\n\n# Generate some random values of carbon cycle parameters\n# use a seed for reproducible results\nfrom scipy.stats import norm\nr0 = norm.rvs(size=nrun, loc=35, scale=5.0, random_state=42)\nrc = norm.rvs(size=nrun, loc=0.019, scale=0.003, random_state=77)\nrt = norm.rvs(size=nrun, loc=4.165, scale=0.5, random_state=1729)\n\n# initialise plot\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), emissions, color='black')\nax1.set_ylabel('Emissions (GtC)')\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n# run the model and plot outputs\nprint (\"run      r0     rc    rt\")\nfor i in range(nrun):\n    print (\"  %d  %5.3f %5.4f %5.3f\" % (i, r0[i], rc[i], rt[i]))\n    C[:,i],F[:,i],T[:,i] = fair.forward.fair_scm(\n        emissions=emissions,\n        other_rf=other_rf,\n        useMultigas=False,\n        r0 = r0[i],\n        rc = rc[i],\n        rt = rt[i]\n    )\n    ax2.plot(range(0, emissions.size), C[:,i], label='run %d' % i)\n    ax2.set_ylabel('CO$_2$ concentrations (ppm)')\n    ax3.plot(range(0, emissions.size), F[:,i])\n    ax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\n    ax4.plot(range(0, emissions.size), T[:,i])\n    ax4.set_ylabel('Temperature anomaly (K)');\nax2.legend();","output":{"0":{"name":"stdout","output_type":"stream","text":"run      r0     rc    rt\n  0  37.484 0.0197 3.821\n  1  34.309 0.0210 3.755\n  2  38.238 0.0173 4.991\n"},"1":{"name":"stdout","output_type":"stream","text":"  3  42.615 0.0202 3.877\n  4  33.829 0.0204 4.714\n  5  33.829 0.0131 4.628\n"},"2":{"name":"stdout","output_type":"stream","text":"  6  42.896 0.0198 3.668\n  7  38.837 0.0143 3.736\n  8  32.653 0.0237 4.202\n  9  37.713 0.0168 4.430\n"},"3":{"data":{"image/png":"c7dd5df5b4a4bc1de6f082729e2883cb809fbbcc","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":516,"width":935}},"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"e5747a","input":"# set up emissions and forcing arrays\nemissions = np.ones(250) * 10.0   # Unit: GtC\nemissions[125:] = 0.0\nother_rf = np.zeros(emissions.size)\nfor x in range(0, emissions.size):\n    other_rf[x] = 0.5 * np.sin(2 * np.pi * (x) / 14.0)\n\n# create output arrays\nnrun=4\nC = np.empty((emissions.size, nrun))\nF = np.empty((emissions.size, nrun))\nT = np.empty((emissions.size, nrun))\n\n# Play with the carbon boxes\ntau2 = np.array([1e6, 400.0, 100.0, 5.0])\na2   = np.ones(4) * 0.25\n\n# Nobody said we had to stick to a four-box model...\ntau3 = np.array([1e6, 1000.0, 150.0, 70.0, 15.0, 3.0])\na3   = np.array([0.1, 0.2, 0.2, 0.2, 0.2, 0.1])\n\n# A pathological case where tau0 is much smaller than 1e6\n# in this example CO2 behaves more like other GHGs\ntau4 = np.array([10., 4., 1., 0.3])\na4   = np.ones(4) * 0.25\n\n# run the model for default values\nC[:,0],F[:,0],T[:,0] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False)\n\n# ... and for our alternatives\nC[:,1],F[:,1],T[:,1] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False,\n    tau=tau2,\n    a=a2)\nC[:,2],F[:,2],T[:,2] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False,\n    tau=tau3,\n    a=a3)\nC[:,3],F[:,3],T[:,3] = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False,\n    tau=tau4,\n    a=a4)\n\n# plot the output\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), emissions, color='black')\nax1.set_ylabel('Emissions (GtC)')\nax2 = fig.add_subplot(222)\nhandles = ax2.plot(range(0, emissions.size), C)\nlabels = ['4-box default','4-box alternative','6-box','pathological']\nax2.legend(handles, labels)\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3 = fig.add_subplot(223)\nax3.plot(range(0, emissions.size), F)\nax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\nax4 = fig.add_subplot(224)\nax4.plot(range(0, emissions.size), T)\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"1e6c11988f6158a436b1b6e2d480d2669e998294","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":516,"width":941}},"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"2fa7f2","input":"# set up emissions and forcing arrays\nemissions = np.ones(500) * 10.0   # Unit: GtC\nother_rf = 0\n\n# create output arrays\nnrun=3\nC = np.empty((emissions.size, nrun))\nF = np.empty((emissions.size, nrun))\nT = np.empty((emissions.size, nrun))\n\n# run the model for default values\nC[:,0],F[:,0],T[:,0] = fair.forward.fair_scm(\n    emissions=emissions,\n    useMultigas=False)","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"0238d1","input":"Many of the options are the same as for the forward model, and provide reasonable sensible defaults if not specified. The classic example of a 1% per year CO2 increase will be demonstrated.","pos":47,"type":"cell"}
{"cell_type":"markdown","id":"19282b","input":"## Ensemble generation\n\nAn advantage of FaIR is that it is very quick to run (much less than a second on an average machine). Therefore it can be used to generate probabilistic future ensembles. We’ll show a 100-member ensemble.\n\nFaIR comes with a built-in ensemble generator that takes into account the fact that ECS and TCR are highly correlated (at least in CMIP5 models). A joint-lognormal or joint-normal distribution of ECS and TCR can be generated, and optionally the correlation can be switched off. See the documentation for fair.tools.ensemble.ecstcr_generate for details.\n\nThis example also introduces the scale and F2x keywords. scale (a 13 element array) governs the forcing scaling factor of each of the 13 categories of forcing, whereas F2x determines the ERF from a doubling of $CO_2$.","pos":54,"type":"cell"}
{"cell_type":"markdown","id":"198912","input":"## $CO_2$ driven run\n## Basic example\n\nHere we show how FaIR can be run with step change $CO_2$ emissions and sinusoidal non-$CO_2$ forcing timeseries. This is a FaIR v1.0-style setup in which $CO_2$ is the only emitted species.\n\nIn almost every application of FaIR you will probably want to vary the emissions time series going in to fair_scm. In $CO_2$-only mode this is a 1D array of $CO_2$ emissions. Setting useMultigas=False turns off the emissions from non-$CO_2$ species. To include radiative forcing from non-$CO_2$ forcers, you can specify a constant or a timeseries to the other_rf keyword as in the below example.\n\nThe output from FaIR is a 3-tuple of (C,F,T) arrays. In $CO_2$ mode, both C (representing $CO_2$ concentrations in ppm) and F (total radiative forcing in W m-2) are 1D arrays. T (temperature change since the pre-industrial) is always output as a 1D array.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"1b10b6","input":"The “engine” of FaIR is the fair_scm function in the forward module.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"1fdb60","input":"## Temperature time constants\n\nThe slow and fast response of global mean surface temperature is governed by the two-element array d: this parameter determines the rate at which radiative forcing is “realised” as a change in surface temperature.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"24aa76","input":"## Natural emissions and GHG lifetimes\n\nIn order to balance historical concentrations of methane and nitrous oxide, we assume a time-varying profile of natural emissions. This can be varied with the natural keyword (a (nt, 2) array of methane and nitrous oxide emissions). Additionally, the default greenhouse gas decay constants can be modified with the lifetimes keyword (shape (31,)).\n\nIt can clearly be seen that natural emissions are important in maintaining historical concentrations.","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"293622","input":"Some recent studies (Armour 2017; Gregory and Andrews 2016) suggest that ECS and TCR may not be constant. Fortunately we can investigate this in FaIR by specifying tcrecs as a two dimensional (nt, 2) array. Notice the effect that a varying ECS/TCR has on the temperature.","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"295b98","input":"## A multi-gas example\n\nThis sets up a multi-gas emissions array and serves to demonstrate some of the options that can be specified in fair_scm for multi-gas runs (most are changed from the default and some are non-sensical but shown for illustration). Note this is a completely hypothetical scenario!","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"2be6cb","input":"## RCP scenarios\n\nCreating a 40-column emissions input table may seem a lot of work. FaIR comes with tools to make your life easier!\n\nWe can run FaIR with the $CO_2$ emissions and non-$CO_2$ forcing from the four representative concentration pathway scenarios. These can be imported from the RCPs module and have inbuilt Forcing and Emissions classes. There is also a tool for converting MAGICC6 *.SCEN files into FaIR input (in fair/tools/magicc).\n\nHere we show the FaIR implementation of the RCP scenarios.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"2c69d0","input":"The alternative is to specify the values of q directly (a 2D array) that go into the temperature calculation, bypassing tcrecs completely (setting tcrecs=None). It is not known under what circumstances the user may want to do this, but be assured it’s possible!","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"31a4f8","input":"## Multi-species mode\n\nMore interesting scenarios can be created with the full suite of forcing agents. The key changes from $CO_2$-only mode that should be remembered are:\n\n* This time the emissions dataset is a (nt, 40) array of inputs\n\n* useMultigas should be set to True, or omitted (this is the default option)\n\n* The concentration and forcing outputs are themselves 2-dimensional arrays of size (nt, 31) and (nt, 13) respectively\n\n* More input options to fair_scm become available.\n\nThe basic call to fair_scm remains the same:","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"386596","input":"## Restart runs\nSometimes you may want to spin up FaIR in emissions-driven mode, and then impose a constant forcing or other scenario from a certain point in the future. The configuration of FaIR can be saved and re-used. This can be useful for investigating things like the climate change commitment from past emissions, because the carbon cycle and ocean thermal response will not be in their pre-industrial state.\n\nNote the extra tuple element (restart) in the call to fair_scm. To activate, set the restart_out = True keyword in the first run, and restart_in keyword in the second run.\n\nCurrently, this is only possible when going from a $CO_2$-only run to a $CO_2$-only run, or a multi-forcing run to a $CO_2$-only run. In this example we will run from 1765 to 2020 with all forcing agents, and then investigate the totally hypothetical scenario of a zeroing of $CO_2$ emissions from 2020, with a constant non-$CO_2$ radiative forcing.","pos":61,"type":"cell"}
{"cell_type":"markdown","id":"4bef27","input":"The index order of the columns follows that of the RCP datasets at [http://www.pik-potsdam.de/~mmalte/rcps/](http://www.pik-potsdam.de/~mmalte/rcps/)","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"4e7ccd","input":"## Time-integrated airborne fraction\n\nThe $CO_2$ time constants, tau, are scaled by the 100-year time-integrated airborne fraction for a pulse of $CO_2$. This 100-year time horizon can be changed with the keyword iirf_h. The actual time-integrated airborne fraction is a function of r0, rt and rc. In high-emissions scenarios this can get quite high, and if it exceeds iirf_h (100 years in the default case) we enter a regime in which there is no solution for the scaling factor. Therefore, a maximum IIRF can be set (iirf_max, default value 97 years) which places an upper limit on the time-integrated airborne fraction.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"534b64","input":"## Changing $CO_2$ lifetime and partitioning coefficients\n\nThe $CO_2$ initial lifetime and partitioning coefficients are quantified by the tau and a parameters respectively. The rationale follows the four-box model in Myhre et al. (2013), scaled by the impact of land and ocean carbon uptake as described in Millar et al., (2017).\n\ntau, in years, is the time constant for each carbon pool and is ordered from slowest carbon pool to fastest, and a is the fraction of new $CO_2$ emissions going in to each pool. The first element of tau is usually very large and represents the fraction of $CO_2$ emissions that remain in the atmosphere “quasi-permanently”, i.e. removed only on geological time scales, far past the range of times in which FaIR is expected to give useful results (although nobody will stop you using a smaller value as we demonstrate). An error should be thrown if the sum of a is not one.\n\nIn the second figure it can be seen that these parameter settings are important for the rate of decay of atmospheric $CO_2$ in particular.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"54ca62","input":"## ECS and TCR\n\nThe equilibrium climate sensitivity (defined as the equilibrium warming for an abrupt doubling of $CO_2$ concentrations) and transient climate response (defined as the temperature change after a $CO_2$ doubling to a 1% per year compound increase in $CO_2$ concentrations - approximately 70 years) are both key uncertainties in climate science. The temperature response in FaIR depends on both. The tcrecs parameter, a 2-element array, controls this.\n\nThis next example shows the effect of varying the ECS and TCR. (Note that by definition the case ECS=1.0, TCR=1.75 is not possible, but FaIR can handle such cases anyway).\n\nThe biggest effect is on the temperature response, but as the temperature feeds back into the carbon cycle, this also affects the $CO_2$ concentrations and the radiative forcing.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"555173","input":"## Varying the carbon cycle parameters\n\nFaIR is set up to simulate the responses to more complex earth system models. This is achieved by a scaling of a four-box decay model for atmospheric carbon dioxide emissions based on the time-integrated airborne fraction of carbon dioxide. This in turn depends on the efficiency of carbon sinks, which is a function of temperature change and total accumulated carbon uptake. Much of the technical detail is described in Millar et al., (2017).\n\nIn the carbon cycle, the important variables are r0, rc and rt which are in turn the pre-industrial sensitivity of carbon sinks, the sensitivity to cumulative carbon dioxide emissions, and sensitivity to temperature change.\n\nThis time we will demonstrate with a 10 Gt constant pulse and use a 10-member ensemble.","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"5a511c","input":"## Switching the carbon cycle\n\nThe carbon cycle can be sped up by a factor of about 2 by using the Generalised Impulse Response (GIR) forumlation (Leach et al., 2020) by setting gir_carbon_cycle to True. This is likely to be the default in the future.\n\nWhile there are some differences between the two methods for high temperature/carbon scenarios after 2200, the real-world (and full-complexity) model response at this level of emissions is so uncertain that this level of approximation is sufficient.","pos":63,"type":"cell"}
{"cell_type":"markdown","id":"6fef7c","input":"Some, but not all, of the higher end scenarios have been constrained out, but there is still quite a large range of total temperature change projected for 2500 even under this constraint.\n\nFrom these constraints it is possible to obtain posterior distributions on effective radiative forcing, ECS, TCR, TCRE and other metrics.","pos":60,"type":"cell"}
{"cell_type":"markdown","id":"ac2391","input":"## Radiative forcing\n\nHere we show some of the more interesting examples for the effective radiative forcing time series coming out of FaIR.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"ad64e5","input":"With the exception of volcanic and solar, all forcing outputs are calculated from the input emissions.","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"ae00c4","input":"## Forcing-only runs\n\nIf you want to specify a pure forcing and bypass the carbon cycle routine this is also possible by setting emissions=False. This time, we will add a linear forcing to the sinusodal forcing above. Note that the $CO_2$ concentrations are not updated from their pre-industrial value.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"c302cb","input":"## Emissions\n\nIn multi-species model, emissions are input as an (nt, 40) emissions array. The index order and units of the columns are as follows:","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"c4c0be","input":"## Geoffroy temperature function\n\nWe can use a different forcing to temperature coupling other than the one provided by default in FaIR. The two-layer model of Geoffroy et al., (2013 a, b) is mathematically equivalent but is specified in terms of ocean heat capacity, heat exchange and climate feedback, and allows for diagnosis of ocean heat uptake.\n\nThe call to fair_scm takes different parameters. Set temperature_function=\"Geoffroy\" to use the two-layer model. lambda_global sets the climate feedback parameter, ocean_heat_capacity sets ocean heat capacity for the mixed and deep layers (2-element array), deep_ocean_efficacy is the efficacy factor and ocean_heat_exchange is the heat transfer coefficient between the two layers. It can be shown that the two specifications are mathematically equivalent - slight differences in the temperature response are probably due to timestepping and/or imprecision in the input parameters.\n\nBelow, the model response is tuned based on the $MIROC_5$ model (see the Geoffroy papers for parameters).\n\nThanks to Zeb Nicholls and Glen Harris for implementations of the two-layer model, some of which was used here.","pos":65,"type":"cell"}
{"cell_type":"markdown","id":"c6403d","input":"## Running in concentration-driven mode\n\nIt is possible to drive FaIR with concentrations rather than emissions. Set the emissions_driven keyword to False and specify the concentrations with C. The function still returns the C, F, T tuple; comparison of the input concentrations with the output concentrations can be performed as a sense check to verify the code is not changing anything.\n\n## $CO_2$ only","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"cd0e7a","input":"## Adding a temperature constraint\n\nThe resulting projections show a large spread. Some of these ensemble members are unrealistic, ranging from around 0.4 to 2.0 K temperature change in the present day, whereas we know in reality it is more like 0.95 (plus or minus 0.2). Therefore we can constrain this ensemble to observations.","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"d8a0db","input":"## Diagnosing $CO_2$ emissions\n\nFor carbon budget calculations it is often useful to calculate (cumulative) $CO_2$ emissions for a given concentration of $CO_2$. The fair.inverse module provides the opportunity to do this. Currently fair.inverse only runs in $CO_2$ mode.","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"f1ec60","input":"## Concentrations of well-mixed greenhouse gases\n\nIn this example we also show how to group minor gases into CFC12 and HFC134a equivalent concentrations. Refer to table above for gas indices.","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"f36304","input":"## Multi-gas\n\nIn multi-gas concentrations driven mode, all non-WMGHG forcing that is normally calculated from emissions (tropospheric ozone, aviation contrails, aerosols, black carbon on snow and land use) is provided externally. The default values for each are zero. WMGHG forcing that is calculated from concentrations or forcing (stratospheric ozone and stratospheric water vapour from methane) is not affected.","pos":50,"type":"cell"}
{"id":0,"time":1611592489862,"type":"user"}
{"last_load":1611528089569,"type":"file"}