{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-4ffb7738-b09f-4d47-bc67-cff9e473f39c.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"81e45a","input":"","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"07815c","input":"pip install fair","output":{"0":{"name":"stdout","output_type":"stream","text":"Defaulting to user installation because normal site-packages is not writeable\r\n"},"1":{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: fair in /home/user/.local/lib/python3.8/site-packages (1.6.1)\r\n"},"2":{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (from fair) (3.3.3)\r\nRequirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (from fair) (1.2.1)\r\nRequirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.8/dist-packages (from fair) (1.6.0)\r\nRequirement already satisfied: numpy>=1.14.5 in /usr/local/lib/python3.8/dist-packages (from fair) (1.19.4)\r\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/lib/python3/dist-packages (from matplotlib->fair) (1.0.1)\r\nRequirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->fair) (2.8.1)\r\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /usr/local/lib/python3.8/dist-packages (from matplotlib->fair) (2.4.7)\r\nRequirement already satisfied: cycler>=0.10 in /usr/lib/python3/dist-packages (from matplotlib->fair) (0.10.0)\r\nRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.8/dist-packages (from matplotlib->fair) (8.1.0)\r\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.1->matplotlib->fair) (1.15.0)\r\nRequirement already satisfied: pytz>=2017.3 in /usr/lib/python3/dist-packages (from pandas->fair) (2019.3)\r\n"},"3":{"name":"stdout","output_type":"stream","text":"Note: you may need to restart the kernel to use updated packages.\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"43a9e2","input":"# Get RCP modules\nfrom fair.RCPs import rcp26, rcp45, rcp60, rcp85\n\n# Basic RCP runs\nC26, F26, T26 = fair.forward.fair_scm(emissions=rcp26.Emissions.emissions)\nC45, F45, T45 = fair.forward.fair_scm(emissions=rcp45.Emissions.emissions)\nC60, F60, T60 = fair.forward.fair_scm(emissions=rcp60.Emissions.emissions)\nC85, F85, T85 = fair.forward.fair_scm(emissions=rcp85.Emissions.emissions)\n\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\nax1.plot(rcp26.Emissions.year, rcp26.Emissions.co2_fossil, color='green', label='RCP2.6')\n# just show CO2 conc.\nax2.plot(rcp26.Emissions.year, C26[:, 0], color='green')\n# sum over axis 1 to get total ERF\nax3.plot(rcp26.Emissions.year, np.sum(F26, axis=1), color='green')\nax4.plot(rcp26.Emissions.year, T26, color='green')\n\nax1.plot(rcp45.Emissions.year, rcp45.Emissions.co2_fossil, color='blue', label='RCP4.5')\nax2.plot(rcp45.Emissions.year, C45[:, 0], color='blue')\nax3.plot(rcp45.Emissions.year, np.sum(F45, axis=1), color='blue')\nax4.plot(rcp45.Emissions.year, T45, color='blue')\n\nax1.plot(rcp60.Emissions.year, rcp60.Emissions.co2_fossil, color='red', label='RCP6')\nax2.plot(rcp60.Emissions.year, C60[:, 0], color='red')\nax3.plot(rcp60.Emissions.year, np.sum(F60, axis=1), color='red')\nax4.plot(rcp60.Emissions.year, T60, color='red')\n\nax1.plot(rcp85.Emissions.year, rcp85.Emissions.co2_fossil, color='black', label='RCP8.5')\nax2.plot(rcp85.Emissions.year, C85[:, 0], color='black')\nax3.plot(rcp85.Emissions.year, np.sum(F85, axis=1), color='black')\nax4.plot(rcp85.Emissions.year, T85, color='black')\n\nax1.set_ylabel('Fossil CO$_2$ Emissions (GtC)')\nax1.legend()\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3.set_ylabel('Total radiative forcing (W m$^{-2}$)')\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"75be3dc63e9c584007f3ff3eb9537a892935d341","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":518,"width":939}},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"cf3851","input":"# Here we define a list of 3 cases with different values of ECS, TCR and associated colours.\necs = np.array([1.5, 3.0, 4.5])\ntcr = np.array([1.6, 1.6, 1.6])\ncolors = ['b','k','r'] # You can add more colours using the names listed here: https://matplotlib.org/3.1.0/gallery/color/named_colors.html\n\n# create output arrays for the FaIR runs for each case\nnrun=len(colors) # size of array\nyears=rcp26.Emissions.year.size # number of years\nT26_ens = np.empty((years, nrun))\nT45_ens = np.empty((years, nrun))\nT60_ens = np.empty((years, nrun))\nT85_ens = np.empty((years, nrun))\n\n# initialise plot\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.set_ylabel('Temperature Change (K)')\nax1.set_title('RCP 2.6')\nax2 = fig.add_subplot(222)\nax2.set_ylabel('Temperature Change (K)')\nax2.set_title('RCP 4.5')\nax3 = fig.add_subplot(223)\nax3.set_ylabel('Temperature Change (K)')\nax3.set_title('RCP 6.0')\nax4 = fig.add_subplot(224)\nax4.set_ylabel('Temperature Change (K)')\nax4.set_title('RCP 8.5')\n\n# run the model and generate outputs for 2xCO2\nfor i in range(nrun): # loop over the 3 cases\n    # RCP 2.6\n    C, F, T26_ens[:,i] = fair.forward.fair_scm(emissions=rcp26.Emissions.emissions, tcrecs=np.array([tcr[i], ecs[i]]))\n    ax1.plot(rcp26.Emissions.year[135:436], T26_ens[135:436,i], color=colors[i], label='ECS=%3.1fK, TCR=%4.2fK' % (ecs[i], tcr[i]))\n    # ax1.[THE CODE TO SET Y LIMITS]\n    # RCP 4.5\n    C, F, T45_ens[:,i] = fair.forward.fair_scm(emissions=rcp45.Emissions.emissions, tcrecs=np.array([tcr[i], ecs[i]]))\n    ax2.plot(rcp45.Emissions.year[135:436], T45_ens[135:436,i], color=colors[i], label='ECS=%3.1fK, TCR=%4.2fK' % (ecs[i], tcr[i]))\n    # ax2.[THE CODE TO SET Y LIMITS]\n    # RCP 6.0\n    C, F, T60_ens[:,i] = fair.forward.fair_scm(emissions=rcp60.Emissions.emissions, tcrecs=np.array([tcr[i], ecs[i]]))\n    ax3.plot(rcp60.Emissions.year[135:436], T60_ens[135:436,i], color=colors[i], label='ECS=%3.1fK, TCR=%4.2fK' % (ecs[i], tcr[i]))\n    # ax3.[THE CODE TO SET Y LIMITS]\n    # RCP 8.5\n    C, F, T85_ens[:,i] = fair.forward.fair_scm(emissions=rcp85.Emissions.emissions, tcrecs=np.array([tcr[i], ecs[i]]))\n    ax4.plot(rcp85.Emissions.year[135:436], T85_ens[135:436,i], color=colors[i], label='ECS=%3.1fK, TCR=%4.2fK' % (ecs[i], tcr[i]))\n    # ax4.[THE CODE TO SET Y LIMITS]\n\nax1.legend()\nax2.legend()\nax3.legend()\nax4.legend()","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f61ad5a6b80>"},"exec_count":11,"output_type":"execute_result"},"1":{"data":{"image/png":"bdf277c9644dea9cdf75c24eb2a649b46c335350","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":11,"metadata":{"image/png":{"height":531,"width":938}},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"eac401","input":"from scipy import stats\nfrom fair.tools.ensemble import tcrecs_generate\n\n# generate 100 TCR and ECS pairs, using a lognormal distribution informed by CMIP5 models\ntcrecs = tcrecs_generate('cmip5', n=100, dist='lognorm', correlated=True, seed=38571)\n\n# generate some forcing scale factors with SD of 10% of the best estimate\nF_scale = stats.norm.rvs(size=(100,13), loc=1, scale=0.1, random_state=40000)\nF2x = 3.71 * F_scale[:,0]\nF_scale[:,0] = 1.0  # set CO2 forcing scaling with F2x above\n\n# generate ensemble for carbon cycle parameters\nr0 = stats.norm.rvs(size=100, loc=35, scale=3.5, random_state=41000)\nrc = stats.norm.rvs(size=100, loc=0.019, scale=0.0019, random_state=42000)\nrt = stats.norm.rvs(size=100, loc=4.165, scale=0.4165, random_state=45000)\n\nnt = len(rcp45.Emissions.year)\nT = np.zeros((nt,100))\n\nfor i in range(100):\n    _, _, T[:,i] = fair_scm(emissions=rcp85.Emissions.emissions,\n                            r0 = r0[i],\n                            rc = rc[i],\n                            rt = rt[i],\n                            tcrecs = tcrecs[i,:],\n                            scale = F_scale[i,:],\n                            F2x = F2x[i]\n                           )","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"f2d329","input":"fig = plt.figure()\nax1 = fig.add_subplot(111)\nax1.plot(rcp85.Emissions.year[0:336], T[0:336,:]);\n\n# Cowtan & Way in-filled dataset of global temperatures\nCW = np.loadtxt('had4_krig_annual_v2_0_0.csv')\nax1.plot(CW[30:,0], CW[30:,1]+0.35, color='k'); # This black line is to show you the observations but note I eyeballed the offset as I didn't know it.","output":{"0":{"data":{"image/png":"9c3f869ce7553f586a9bf0e01583611fb6ce562c","text/plain":"<Figure size 1152x648 with 1 Axes>"},"exec_count":13,"metadata":{"image/png":{"height":516,"width":922}},"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"de1fa2","input":"from fair.tools.constrain import hist_temp\n\n# Cowtan & Way in-filled dataset of global temperatures\nCW = np.loadtxt('had4_krig_annual_v2_0_0.csv')\nconstrained = np.zeros(100, dtype=bool)\nfor i in range(100):\n    # we use observed trend from 1880 to 2016\n    constrained[i],_,_,_,_ = hist_temp(\n        CW[30:,1], T[1880-1765:2017-1765,i], CW[30:,0])\n\n# How many ensemble members passed the constraint?\nprint (np.sum(constrained))\n\n# What does this do to the ensemble?\nfig = plt.figure()\nax1 = fig.add_subplot(111)\nax1.plot(rcp85.Emissions.year[0:336], T[0:336,constrained]);\nax1.plot(CW[30:,0], CW[30:,1]+0.35, color='k'); # This black line is to show you the observations but note I eyeballed the offset as I didn't know it.","output":{"0":{"name":"stdout","output_type":"stream","text":"46\n"},"1":{"data":{"image/png":"9912f55da68166f2a730bd29b043fd84761320ab","text/plain":"<Figure size 1152x648 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":516,"width":922}},"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"249335","input":"# Basic RCP runs\nC26, F26, T26 = fair.forward.fair_scm(emissions=rcp26.Emissions.emissions)\nC45, F45, T45 = fair.forward.fair_scm(emissions=rcp45.Emissions.emissions)\nC60, F60, T60 = fair.forward.fair_scm(emissions=rcp60.Emissions.emissions)\nC85, F85, T85 = fair.forward.fair_scm(emissions=rcp85.Emissions.emissions)\n\nrcp26_cum_sum_emit = np.cumsum(rcp26.Emissions.co2_fossil + rcp26.Emissions.emissions[:,2])\nrcp45_cum_sum_emit = np.cumsum(rcp45.Emissions.co2_fossil + rcp26.Emissions.emissions[:,2])\nrcp60_cum_sum_emit = np.cumsum(rcp60.Emissions.co2_fossil + rcp26.Emissions.emissions[:,2])\nrcp85_cum_sum_emit = np.cumsum(rcp85.Emissions.co2_fossil + rcp26.Emissions.emissions[:,2])\n\ndef moving_average(x, w):\n    return np.convolve(x, np.ones(w), 'valid') / w\n\nstart_idx = 235\nend_idx = 336\n\nfig = plt.figure()\nax1 = fig.add_subplot(111)\nax1.plot(rcp26_cum_sum_emit[start_idx:end_idx], T26[start_idx:end_idx], color='green')\nax1.plot(rcp45_cum_sum_emit[start_idx:end_idx], T45[start_idx:end_idx], color='blue')\nax1.plot(rcp60_cum_sum_emit[start_idx:end_idx], T60[start_idx:end_idx], color='red')\nax1.plot(rcp85_cum_sum_emit[start_idx:end_idx], T85[start_idx:end_idx], color='black')\nax1.set_ylabel(\"Temperature Change (K)\")\nax1.set_xlabel(\"Cumulative Total CO2 emissions (GtC)\")\nax1.set_title(\"Cumulative CO2 vs. Temperature\")","output":{"0":{"data":{"text/plain":"Text(0.5, 1.0, 'Cumulative CO2 vs. Temperature')"},"exec_count":15,"output_type":"execute_result"},"1":{"data":{"image/png":"be8e9aacb5da20cb33feb0a31819a29e8aa8f861","text/plain":"<Figure size 1152x648 with 1 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":544,"width":938}},"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"a23562","input":"# REPLACE THIS CODE BOX WITH YOUR OWN\n\nprint(\"In the year 2000 in the RCP4.5 scenario the world had warmed by:\", T45[235], \"K\")","output":{"0":{"name":"stdout","output_type":"stream","text":"In the year 2000 in the RCP4.5 scenario the world had warmed by: 0.857640067655558 K\n"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"72e58a","input":"# your code here","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6ba033","input":"# First I define the evolution of CO2 concentrations over time.\nco2_1pc = np.zeros(150) # generate empty arrays 150 elements long (each element is 1 year)\nco2_2x = np.zeros(150)\n# Loop through these arrays to define a timeseries of CO2 concentration\nfor x in range(0, co2_1pc.size): \n    co2_1pc[x] = 290 * 1.01**(x) # set the initial CO2 conc (290 ppmv) to increase by 1% per year (**X means to the power X)\n    co2_2x[x] = 580 # set CO2 to double its standard setting for all years\n\nco2_2x[0] = 290 # set CO2 in year 1 to original value\n\n# Run the FaIR model to predict the temperature response (and forcing, not shown)\nC1,F1,T1 = fair.forward.fair_scm(\n    emissions_driven=False,\n    C=co2_1pc,\n    useMultigas=False)\n\nC2,F2,T2 = fair.forward.fair_scm(\n    emissions_driven=False,\n    C=co2_2x,\n    useMultigas=False)\n\n# Start the figure\nfig = plt.figure()\n# Define the left-hand CO2 plot\nax1 = fig.add_subplot(121)\n# plot the two lexperiments\nax1.plot(C1, label='1% per year')\nax1.plot(C2, label='2xCO2')\n# label the plot\nax1.set_ylabel(\"CO2 concentration (ppmv)\")\nax1.set_ylabel(\"Years\")\nax1.set_title(\"CO2 concentration\")\n\n# Define the right-hand Temperature plot\nax2 = fig.add_subplot(122)\nax2.plot(T1, label='1% per year')\nax2.plot(T2, label='2xCO2')\nax2.set_ylabel(\"Temperature Change (K)\")\nax2.set_title(\"Temperature Change\")\nax2.set_ylabel(\"Years\")\n\n### TASK - Use the red dot to indicate the year, CO2 concentration and temperature for the TCR\nyear = 70 # CHANGE THIS\nco2_at_year = 580 # CHANGE THIS - Hint CO2 starts at 290 ppmv\ntemp_at_year = 1.75 # CHANGE THIS\n\nax1.plot(year, co2_at_year, marker='o', markersize=10, color=\"red\", label='TCR')\nax2.plot(year, temp_at_year, marker='o', markersize=10, color=\"red\", label='TCR')\n# ax2 = point.plot(x=70, y=1.2, ax=ax2, style='r-', label='point')\n\n### TASK - Use the horizontal dashed line to indicate your estimate for the equilibrium climate sensitivity in FaIR\necs_estimate = 1.0 # CHANGE THIS\n\nax2.plot([0,150], [ecs_estimate, ecs_estimate], color=\"k\", linestyle=\"dashed\", label='ECS')\n# ax2 = point.plot(x=70, y=1.2, ax=ax2, style='r-', label='point')\n\nax1.legend()\nax2.legend()","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f61aeaa7f70>"},"exec_count":18,"output_type":"execute_result"},"1":{"data":{"image/png":"dbf383b160fd771a599131586d4865acc4607f7b","text/plain":"<Figure size 1152x648 with 2 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":531,"width":946}},"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"9435c8","input":"%matplotlib inline","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"a00799","input":"# Here we define a list of 3 cases with different values of ECS, TCR and associated colours.\necs = np.array([1.5, 2.25, 3.0, 3.75, 4.5])\ntcr = np.array([1.0, 1.4, 1.75, 2.1, 2.5])\ncolors = ['b','k','r','g','m'] # You can add more colours using the names listed here: https://matplotlib.org/3.1.0/gallery/color/named_colors.html\n\n# create output arrays for the FaIR runs for each case\nnrun=len(colors)\nC1 = np.empty((co2_2x.size, nrun))\nF1 = np.empty((co2_2x.size, nrun))\nT1 = np.empty((co2_2x.size, nrun))\n\nC2 = np.empty((co2_2x.size, nrun))\nF2 = np.empty((co2_2x.size, nrun))\nT2 = np.empty((co2_2x.size, nrun))\n\n# initialise plot\nfig = plt.figure()\nax1 = fig.add_subplot(121)\nax1.set_ylabel('Temperature Change (K)')\nax1.set_title('2xCO2')\nax2 = fig.add_subplot(122)\nax2.set_title('1% CO2 per year')\nax2.set_ylabel('Temperature Change (K)')\n\n# run the model and generate outputs for 2xCO2\nfor i in range(nrun): # loop over the 3 cases\n    C1[:,i],F1[:,i],T1[:,i] = fair.forward.fair_scm(\n        emissions_driven=False,\n        C=co2_2x,\n        useMultigas=False,\n        tcrecs=np.array([tcr[i], ecs[i]])\n    )\n    # plot the 2xCO2 lines\n    ax1.plot(T1[:,i], color=colors[i], label='ECS=%3.1fK, TCR=%4.2fK' % (ecs[i], tcr[i]))\nax1.legend()\n\n# run the model and generate outputs for 2xCO2\nfor i in range(nrun): # loop over the 3 cases\n    C2[:,i],F2[:,i],T2[:,i] = fair.forward.fair_scm(\n        emissions_driven=False,\n        C=co2_1pc,\n        useMultigas=False,\n        tcrecs=np.array([tcr[i], ecs[i]])\n    )\n    \n    ax2.plot(T2[:,i], color=colors[i], label='ECS=%3.1fK, TCR=%4.2fK' % (ecs[i], tcr[i])) \nax2.legend()\n","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f61adbbd6d0>"},"exec_count":20,"output_type":"execute_result"},"1":{"data":{"image/png":"6d0bab12d66f4b99c25f0ac08eda2c06f4760082","text/plain":"<Figure size 1152x648 with 2 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":531,"width":938}},"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"d1c877","input":"import fair\nfair.__version__","output":{"0":{"data":{"text/plain":"'1.6.1'"},"exec_count":3,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"3ab11f","input":"import numpy as np\n\nfrom matplotlib import pyplot as plt\nplt.style.use('seaborn-darkgrid')\nplt.rcParams['figure.figsize'] = (16, 9)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"f1b889","input":"from fair.forward import fair_scm","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"7b29aa","input":"# set up emissions and forcing arrays\nemissions = np.zeros(250)   # Unit: GtC\nemissions[125:] = 10.0\nother_rf = np.zeros(emissions.size)\nfor x in range(0, emissions.size):\n    other_rf[x] = 0.5 * np.sin(2 * np.pi * (x) / 14.0)\n\n# run the model\nC,F,T = fair.forward.fair_scm(\n    emissions=emissions,\n    other_rf=other_rf,\n    useMultigas=False\n)\n\n# plot the output\nfig = plt.figure()\nax1 = fig.add_subplot(221)\nax1.plot(range(0, emissions.size), emissions, color='black')\nax1.set_ylabel('Emissions (GtC)')\nax2 = fig.add_subplot(222)\nax2.plot(range(0, emissions.size), C, color='blue')\nax2.set_ylabel('CO$_2$ concentrations (ppm)')\nax3 = fig.add_subplot(223)\nax3.plot(range(0, emissions.size), F, color='orange')\nax3.set_ylabel('Radiative forcing (W m$^{-2}$)')\nax4 = fig.add_subplot(224)\nax4.plot(range(0, emissions.size), T, color='red')\nax4.set_ylabel('Temperature anomaly (K)');","output":{"0":{"data":{"image/png":"8e5bbabaa02d4bf61de8bf926b25fa5c257dedfb","text/plain":"<Figure size 1152x648 with 4 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":516,"width":935}},"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"ee68c2","input":"# Replace this code box with your copy of the code from above","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"01a354","input":"## Carbon budgets\nUsing the fact that there is a relationship between cumulative CO2 emissions and global-mean temperature it is possible to calculate the remaining carbon budget to stay below a certain temperature threshold.\n\n## TASK: calculate the remaining carbon budget to stay below 1.5 K of warming. copy some of the code above to find a precise value, use comments to explain your code and working.\nHINT: the variable \"start_idx\" specifies the index for the year 2000\n\nHINT2: an example print statement is shown below.","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"1dae49","input":"## QUESTION: It is unclear how much the Earth will warm over the next century. Discuss the relative contribution of climate and scenario uncertainty to the global-mean temperature in 2100.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"25d503","input":"## The RCP scenarios\n\nThe Representative Concentration Pathway (RCP) scenarios are a set of scenarios of future greenhouse gas emissions that climate modelers use as input for their models. The numbers in the scenario refer to the approximate radiative forcing in these scenarios in the year 2100. The scenarios span a range of possible future emissions scenarios from a rapid cut in emissions (RCP2.6) to an extreme upper-end scenario (RCP8.5).\n\nIn the version of FaIR below CO2 emissions (not concentrations) are specified and the model predicts the evolution of CO2 concentrations. For the other greenhouse gases a radiative forcing is calculated. \n\nThe code section below shows CO2 emissions, CO2 concentrations, total forcing, and temperature until 2500.","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"2784ee","input":"## QUESTION: How has the temperature constraint changed the projected range of temperatures for 2100? Give values for the upper and lower bound and the best guess from the graphs above and explain how this constraint has worked.","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"35299d","input":"## Now Let's generate another ensemble of FaIR runs and compare it against observed temperatures\n\nA group of model runs is called an ensemble, and it is composed of ensemble members.\n\nThe code below generates an ensemble of 100 versions of FaIR with correlated values of ECS and TCR with a distribution that matches the results of an ensemble of full climate models called CMIP5 (more on climate models later).\n\nThe black line shows the observed change in global temperatures, and the colored lines are the ensemble members.","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"354811","input":"YOUR ANSWER HERE.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"35a8e0","input":"## Adding a temperature constraint\n\nThe resulting projections show a large spread. Some of these ensemble members are unrealistic, but we can constrain the ensemble to observations, removing those ensemble members that are too far from the observed global temperature change.","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"3f2194","input":"## The Transient Climate Response to Emissions\n\nGiven that there is a robust, linear relationship between cumulative CO2 and emissions it is possible to calculate a metric that quantifies the warming expected for a given increase in cumulative emissions.\n\nThe Transient Climate Response to Emissions (TCRE) is measured in K per TtC (Trillion tons Carbon).\n\n## TASK: Plot cumulative CO2 vs. temperature for your ensemble.\nCopy the code that produces the cumulative CO2 vs temperature plot into the code section below.\n\nComment out (add a # at the start) the lines which plot all the RCP scenarios except for RCP8.5. HINT: pressing [CTRL and /] comments out the line you have selected, or uncomments the line if it is already commented out.\n\nReplace \"T85\" with \"T85_ens\" in the code below to plot the 10 ensemble members you generated with different versions of ECS and TCR","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"486973","input":"# 3.5 Practical - Climate sensitivity and the Transient Climate Response in FaIR\n\nThe code section plots the CO2 concentration and temperature for two experiments:\n- A doubling of CO2 (2xCO2)\n- A 1% per year increase in CO2 concentrations (1% per year)\n\nYou have two tasks, edit the code to:\n- indicate the year, CO2 concentration and temperature associated with the TCR in this model\n- Estimate the equilibrium climate sensitivity (you can't know it for sure)\n\n## How to read and edit the code\nLook through the code below. I've explained some of what is going on in comments (lines starting with #) but much is unexplained but you should be able to make some informed guesses.\nI have indicated where the tasks start with \"\"### TASK\", and the 4 lines that I'd like you to change with \"\"# CHANGE THIS\"","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"4c7365","input":"YOUR ANSWER HERE","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"5345a5","input":"## Test run of FaIR\n\nHere FaIR is run with a step change $CO_2$ emissions and sinusoidal non-$CO_2$ forcing timeseries. \n\nThe output from FaIR is a 3-tuple of (C,F,T) arrays. In $CO_2$ mode, both C (representing $CO_2$ concentrations in ppm) and F (total radiative forcing in W m-2) are 1D arrays. T (temperature change since the pre-industrial) is always output as a 1D array.\n\nYou should see 4 graphs propduced by the code section below","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"630c8d","input":"## TASK\n\nIn this next code section we will get a sense of the relative significance of climate uncertainty (the values of ECS and TCR) vs. scenario or policy uncertainty (the difference between the RCP scenarios).\n\nReplace the first 3 lines of code with the code you wrote above for the 10 different cases (ECS, TCR and colour).\n\nRun the code","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"65d960","input":"# 3.9 - Cumulative CO2 vs Temperature, carbon budgets, and the Transient Climate response to emissions\n\nAs we saw before the RCP scenarios have very different CO2, forcing and temperature evolutions over time but they share a common feature. \n\nThe code section below plots total cumulative CO2 emissions from the pre-industrial (adding each year's emissions on to the last) against global-mean temperature for the years 2000 to 2100","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"6b8682","input":"# Week 3 Practical\n\nThis week's practical will be a bit different, it is intended to be completed alongside watching the week's materials. The practical will make use of the FaIR model, a simple Finite Amplitude Impulse-Response climate-carbon-cycle model. This model is a simple-as-possible but still scientifically useful climate model.\n\n## INSTRUCTIONS\n\nComplete the tasks listed on moodle in week 3 in order, where practical tasks will be numbered like the videos. This practical notebook will also note when you are supposed to be watching moodle material.\n\n### remember - Make sure to run each code section as you pass it ","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"86507f","input":"# 3.8 Practical - Climate sensitivity and the Transient Climate Response in FaIR\n\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"86510b","input":"### TASK\nCopy the code section from above into the code section below.\n\nI want you to plot 10 different cases with ECS values between 1.5 and 4.5 and TCR values between 1.0 and 2.5. These combinations should sample both ranges independently but ensure that all 10 cases are physically plausible.\n\nYou will need to edit the first 3 lines of code that specify the arrays of ecs, tcr and colors. Make sure that all three have 10 elements. \n\nYou will need to follow the link to find the list of accepted color names.\n","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"9040db","input":"## QUESTION: What is your estimate of the best guess for TCRE and the range for your ensemble?\nHINT: what is the temperature difference between 500 GtC and 1500 GtC of Cumulative CO2 emissions in your plot above?","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"a129c0","input":"## QUESTION: Why is this quasi-linear relationship surprising? Hint: think through the various factors between CO2 emissions and temperature and briefly describe their relationship to temperature and their evolution over time.\n\nNOTE: all the lines start in the year 2000 and end in the year 2100. RCP8.5 has emitted much more and warmed much more than RCP2.6 hence the line is longer.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"ac8fe6","input":"## TASK: change the y-axis range on all plots to be the same. \nHINT: google it, it's how everyone solves their coding problems ;)\n\nHINT2: try searching for matplotlib or pyplot\n\nHINT3: stack overflow or the matplotlib pyplot manual will be a good place to look\n\nHINT4: I've indicated where you need to insert the code with comments","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"cb9fa1","input":"# Go back to Moodle and complete tasks 3.6 and 3.7","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"d79e75","input":"YOUR ANSWER HERE","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"da0afd","input":"### QUESTION: Something has gone wrong! which case is problematic and why?\n\nWRITE YOUR ANSWER HERE.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"e274de","input":"## FIN - well done! You are finished.","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"e4a714","input":"# Watch the material in sections 3.1 to 3.4 on Moodle","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"e78b1a","input":"The “engine” of FaIR is the fair_scm function in the forward module.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"ee89db","input":"### TASK\nreplace the TCR value in the problematic case with another physically plausible value (TCR is expected to be between 1.0 to 2.5 K)","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"f701a1","input":"YOUR ANSWER HERE.","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"fb5370","input":"# 3.0 PRACTICAL - Test that the practical notebook runs\nrun the following code sections to check that FaIR is working.","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"fc33fa","input":"## The effect of varying ECS and TCR\n\nIn the code section below we simulate the response to a doubling of CO2 and a 1% increase in CO2 for 3 different cases, which sample different values of ECS for a fixed value of TCR.\nRun the code and identify the problematic case.","pos":13,"type":"cell"}
{"id":0,"time":1615559208699,"type":"user"}
{"last_load":1615559208930,"type":"file"}